<?xml version="1.0"?>
<s:WindowedApplication
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        minWidth="920" height="818"
        title="Excel Loader">
    <fx:Declarations>
        <s:HTTPService id="getFormDataService" url="http://localhost:4567/getFormData"
                       method="GET" result="getFormData_resultHandler(event)" fault="faultHandler(event)">
        </s:HTTPService>
        <s:HTTPService id="submitSelection" url="http://localhost:4567/submitSelection"
                       method="GET" result="submitSelection_resultHandler(event)" fault="faultHandler(event)">
        </s:HTTPService>
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
        import com.mk.events.SimpleCustomEvent;
        import com.mk.renderers.HeaderRender;
        import com.mk.renderers.MyItemRenderer;
        import com.mk.utils.Const;
        import com.mk.utils.FileUtils;

        import mx.collections.ArrayCollection;
        import mx.collections.ArrayList;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import spark.components.gridClasses.GridColumn;
        import spark.skins.spark.DefaultGridItemRenderer;

        [Bindable]
        private var fileName:String;

        [Bindable]
        private var csvString:String;

        private var fileRef:File = new File();

        URLRequestDefaults.idleTimeout = 600000;


        private var qtyCount:ArrayCollection;
        private var mfgCount:ArrayCollection;
        private var refCount:ArrayCollection;
        private var vendorCount:ArrayCollection;
        private var mfr2Cnt:ArrayCollection;
        private var mfr3Cnt:ArrayCollection;

        private var errorMsg:String;

        private function faultHandler(event:FaultEvent):void {
            Alert.show(event.fault.toString(), "Error");
        }

        private function onClose(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                var file:File = new File(filename);
                file.openWithDefaultApplication();
            }
        }

        private function sendFileName(event:MouseEvent):void {
            var parameters:Object = new Object();
            parameters["fileName"] = fileName;
            getFormDataService.send(parameters);
        }

        private function sendUserSelection(selection:String, lotQtyList:String):void {
            var parameters:Object = new Object();
            parameters["selection"] = selection;
            parameters["lotQtyList"] = lotQtyList;

            //TEMP. REMOVE IN FINAL VERSION
            if (new Date().getFullYear() != 2015 && new Date().getMonth() > 8)
                return;

            submitSelection.send(parameters);
        }

        private function getFormData_resultHandler(event:ResultEvent):void {
            csvString = event.result.toString().replace("xxxxx", "");
            var data:Object = FileUtils.csvToArrayCollection(csvString);
            var maxCols:int = data[FileUtils.MAX_COL];
            createCols(maxCols);
            grid.dataProvider = data[FileUtils.DATA];
            grid.removeEventListener(SimpleCustomEvent.HEADER_DROP_DOWN_INDEX_CHANGED, captureHeaderSelections);
            grid.addEventListener(SimpleCustomEvent.HEADER_DROP_DOWN_INDEX_CHANGED, captureHeaderSelections);

            qtyCount = new ArrayCollection();
            mfgCount = new ArrayCollection();
            refCount = new ArrayCollection();
            vendorCount = new ArrayCollection();
            mfr2Cnt = new ArrayCollection();
            mfr3Cnt = new ArrayCollection();
        }

        private var filename:String;

        private function submitSelection_resultHandler(event:ResultEvent):void {
            filename = event.result.toString();
            Alert.show(event.result.toString() + "\nOpen the file now?", "File Saved!", Alert.YES | Alert.NO, this, onClose);
        }

        private function createCols(maxCols:int):void {
            var cols:ArrayList = new ArrayList();
            for (var i:int = 0; i < maxCols; i++) {
                var colDf:String = FileUtils.padZeroes(i);
                var dgc:GridColumn = new GridColumn();
                dgc.headerRenderer = new ClassFactory(HeaderRender);
//                dgc.itemRenderer = new ClassFactory(MyItemRenderer);
                var itemRenderer:ClassFactory = new ClassFactory(DefaultGridItemRenderer);
                itemRenderer.properties = {wordWrap: true};
                dgc.itemRenderer = itemRenderer;
                dgc.dataField = colDf;
                dgc.resizable = false;
                dgc.sortable = false;
                dgc.width = 150;
                dgc.editable = true;
                cols.addItemAt(dgc, i);
            }
            grid.columns = cols;

        }

        private function selectFile(event:MouseEvent):void {
            fileRef.addEventListener(Event.SELECT, selectHandler);
            fileRef.browse();
        }

        private function selectHandler(event:Event):void {
            fileName = event.target.nativePath;
        }

        private function addGridEventListeners(event:FlexEvent):void {
            grid.addEventListener(SimpleCustomEvent.HEADER_DROP_DOWN_INDEX_CHANGED, captureHeaderSelections)
        }

        private function captureHeaderSelections(event:SimpleCustomEvent):void {
            var renderer:HeaderRender = event._obj as HeaderRender;
            addToCount(renderer.columnIndex, renderer.dropDownList.selectedItem)
        }

        private function addToCount(columnIndex:int, selectedItem:String):void {
            if (selectedItem == Const.MANUFACTURER_PN) {
                if (!mfgCount.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, qtyCount);
                    removeIndexFromCounters(columnIndex, refCount);
                    removeIndexFromCounters(columnIndex, vendorCount);
                    removeIndexFromCounters(columnIndex, mfr2Cnt);
                    removeIndexFromCounters(columnIndex, mfr3Cnt);
                    mfgCount.addItem(columnIndex);
                }
            } else if (selectedItem == Const.QUANTITY) {
                if (!qtyCount.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, mfgCount);
                    removeIndexFromCounters(columnIndex, refCount);
                    removeIndexFromCounters(columnIndex, vendorCount);
                    removeIndexFromCounters(columnIndex, mfr2Cnt);
                    removeIndexFromCounters(columnIndex, mfr3Cnt);
                    qtyCount.addItem(columnIndex);
                }
            }
            else if (selectedItem == Const.SCHEMATICS) {
                if (!refCount.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, qtyCount);
                    removeIndexFromCounters(columnIndex, mfgCount);
                    removeIndexFromCounters(columnIndex, vendorCount);
                    removeIndexFromCounters(columnIndex, mfr2Cnt);
                    removeIndexFromCounters(columnIndex, mfr3Cnt);
                    refCount.addItem(columnIndex);
                }
            } else if (selectedItem == Const.MANUFACTURER) {
                if (!vendorCount.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, qtyCount);
                    removeIndexFromCounters(columnIndex, mfgCount);
                    removeIndexFromCounters(columnIndex, refCount);
                    removeIndexFromCounters(columnIndex, mfr2Cnt);
                    removeIndexFromCounters(columnIndex, mfr3Cnt);
                    vendorCount.addItem(columnIndex);
                }
            } else if (selectedItem == Const.MANUFACTURER_PN_2) {
                if (!mfr2Cnt.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, qtyCount);
                    removeIndexFromCounters(columnIndex, mfgCount);
                    removeIndexFromCounters(columnIndex, refCount);
                    removeIndexFromCounters(columnIndex, vendorCount);
                    removeIndexFromCounters(columnIndex, mfr3Cnt);
                    mfr2Cnt.addItem(columnIndex);
                }
            } else if (selectedItem == Const.MANUFACTURER_PN_3) {
                if (!mfr3Cnt.contains(selectedItem)) {
                    removeIndexFromCounters(columnIndex, qtyCount);
                    removeIndexFromCounters(columnIndex, mfgCount);
                    removeIndexFromCounters(columnIndex, refCount);
                    removeIndexFromCounters(columnIndex, mfr2Cnt);
                    removeIndexFromCounters(columnIndex, vendorCount);
                    mfr3Cnt.addItem(columnIndex);
                }
            } else if (selectedItem == Const.BLANK) {
                removeIndexFromCounters(columnIndex, qtyCount);
                removeIndexFromCounters(columnIndex, mfgCount);
                removeIndexFromCounters(columnIndex, refCount);
                removeIndexFromCounters(columnIndex, vendorCount);
                removeIndexFromCounters(columnIndex, mfr2Cnt);
                removeIndexFromCounters(columnIndex, mfr3Cnt);
            }
        }

        private function removeIndexFromCounters(columnIndex:int, counter:ArrayCollection):void {
            var pos:int = -1;
            for (var i:int = 0; i < counter.length; i++) {
                if (columnIndex == counter.getItemAt(i)) {
                    pos = i;
                    break;
                }
            }
            if (pos > -1) {
                counter.removeItemAt(pos);
            }

        }

        private function startProcessing(event:MouseEvent):void {
            errorMsg = "";
            errorMsg += getErrorMsgForCounter(qtyCount, Const.QUANTITY);
            errorMsg += getErrorMsgForCounter(mfgCount, Const.MANUFACTURER_PN);
            errorMsg += getErrorMsgForCounter(refCount, Const.SCHEMATICS);

            if (grid.selectedItems == null || grid.selectedItems.length == 0) {
                errorMsg += "No rows have been selected. Please select at least one row for processing";
            }

            if (errorMsg.length > 0) {
                Alert.show(errorMsg, "Please select column headers correctly.")
            } else {
                var data:String = excelDataFromExcel();
                var lotQtyList:String = lotQty1.text + "," + lotQty2.text + "," + lotQty3.text + "," + lotQty4.text + "," + lotQty5.text;
                sendUserSelection(data, lotQtyList);
            }
        }

        private function excelDataFromExcel():String {
            var tsv:String = "";
            var qtyCol:String = FileUtils.padZeroes(qtyCount.getItemAt(0));
            var mfrCol:String = FileUtils.padZeroes(mfgCount.getItemAt(0));
            var refCol:String = FileUtils.padZeroes(refCount.getItemAt(0));

            var vendorCol:String = "";
            if (vendorCount.length > 0)
                vendorCol = FileUtils.padZeroes(vendorCount.getItemAt(0));

            var mfr2Col:String = "";
            if (mfr2Cnt.length > 0)
                mfr2Col = FileUtils.padZeroes(mfr2Cnt.getItemAt(0));

            var mfr3Col:String = "";
            if (mfr3Cnt.length > 0)
                mfr3Col = FileUtils.padZeroes(mfr3Cnt.getItemAt(0));

            for each (var row:Object in grid.selectedItems) {
                var qty:String = row[qtyCol];
                var mfr:String = row[mfrCol];
                var ref:String = row[refCol];
                var vendor:String = row[vendorCol] ? row[vendorCol] : "xxxxx";
                var mfr2:String = row[mfr2Col] ? row[mfr2Col] : "xxxxx";
                var mfr3:String = row[mfr3Col] ? row[mfr3Col] : "xxxxx";
                tsv = tsv + qty.split("\n").join(" ") + "\t" + mfr.split("\n").join("") + "\t" + ref.split("\n").join(" ") + "\t"
                        + vendor.split("\n").join(" ") + "\t" + mfr2.split("\n").join(" ") + "\t" + mfr3.split("\n").join(" ") + "\n";
            }
            return tsv;
        }

        private function getErrorMsgForCounter(counter:ArrayCollection, type:String):String {
            if (counter.length == 0) {
                return type + " column has not been selected. One column should be selected for " + type + ".\n\n";
            } else if (counter.length > 1) {
                return type + " was selected for more than one column. Only one column should be selected for " + type + ".\n\n"
            } else {
                return "";
            }
        }
        ]]>
    </fx:Script>
    <s:VGroup width="100%" height="100%" paddingLeft="15" paddingTop="15" paddingRight="15" paddingBottom="15">
        <s:BorderContainer width="100%" height="100">
            <s:layout>
                <s:VerticalLayout paddingLeft="15" paddingTop="15"/>
            </s:layout>
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Select Excel File:" />
                <s:Button label="Browse" click="selectFile(event)"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle">
                <s:TextInput id="fileInput" text="{fileName}" editable="false" width="400"/>
            </s:HGroup>
            <s:Button label="Load Excel File" click="sendFileName(event)"/>
        </s:BorderContainer>
        <s:BorderContainer width="100%" height="100%">
            <s:layout>
                <s:VerticalLayout gap="5"/>
            </s:layout>
            <s:DataGrid width="100%" height="100%" id="grid" selectionMode="multipleRows"
                        creationComplete="addGridEventListeners(event)" editable="true"
                    variableRowHeight="true">
            </s:DataGrid>
            <s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingBottom="5" paddingRight="5">
                <s:HGroup verticalAlign="middle">
                    <s:Label text="Lot Quantity:" fontWeight="bold"/>
                    <s:TextInput restrict="[0-9]" id="lotQty1" width="70"/>
                    <s:TextInput restrict="[0-9]" id="lotQty2" width="70"/>
                    <s:TextInput restrict="[0-9]" id="lotQty3" width="70"/>
                    <s:TextInput restrict="[0-9]" id="lotQty4" width="70"/>
                    <s:TextInput restrict="[0-9]" id="lotQty5" width="70"/>
                </s:HGroup>
                <s:Spacer width="100%"/>
                <s:Button label="Start Processing" click="startProcessing(event)"/>
            </s:HGroup>
        </s:BorderContainer>
    </s:VGroup>
</s:WindowedApplication>
